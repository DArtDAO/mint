/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ERC721DAODeployerInterface extends ethers.utils.Interface {
  functions: {
    "clone(address,tuple,tuple,tuple)": FunctionFragment;
    "governor()": FunctionFragment;
    "initialize(address,address,address,address)": FunctionFragment;
    "minter()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setImplementations(address,address,address,address)": FunctionFragment;
    "timelock()": FunctionFragment;
    "token()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "clone",
    values: [
      string,
      { name: string; symbol: string; baseURI: string },
      {
        name: string;
        proposalThreshold: BigNumberish;
        votingDelay: BigNumberish;
        votingPeriod: BigNumberish;
        quorumNumerator: BigNumberish;
        timelockDelay: BigNumberish;
      },
      {
        maxTokens: BigNumberish;
        tokenPrice: BigNumberish;
        maxMintsPerTx: BigNumberish;
        startingBlock: BigNumberish;
        creatorShares: BigNumberish;
        daoShares: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(functionFragment: "governor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "minter", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setImplementations",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "timelock", values?: undefined): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "clone", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "governor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "minter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setImplementations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "timelock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "ImplementationsSet(address,address,address,address)": EventFragment;
    "NewClone(address,address,address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ImplementationsSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewClone"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class ERC721DAODeployer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ERC721DAODeployerInterface;

  functions: {
    clone(
      creatorAddress: string,
      tokenParams: { name: string; symbol: string; baseURI: string },
      governorParams: {
        name: string;
        proposalThreshold: BigNumberish;
        votingDelay: BigNumberish;
        votingPeriod: BigNumberish;
        quorumNumerator: BigNumberish;
        timelockDelay: BigNumberish;
      },
      minterParams: {
        maxTokens: BigNumberish;
        tokenPrice: BigNumberish;
        maxMintsPerTx: BigNumberish;
        startingBlock: BigNumberish;
        creatorShares: BigNumberish;
        daoShares: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    governor(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      token_: string,
      timelock_: string,
      governor_: string,
      minter_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    minter(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setImplementations(
      token_: string,
      timelock_: string,
      governor_: string,
      minter_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    timelock(overrides?: CallOverrides): Promise<[string]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  clone(
    creatorAddress: string,
    tokenParams: { name: string; symbol: string; baseURI: string },
    governorParams: {
      name: string;
      proposalThreshold: BigNumberish;
      votingDelay: BigNumberish;
      votingPeriod: BigNumberish;
      quorumNumerator: BigNumberish;
      timelockDelay: BigNumberish;
    },
    minterParams: {
      maxTokens: BigNumberish;
      tokenPrice: BigNumberish;
      maxMintsPerTx: BigNumberish;
      startingBlock: BigNumberish;
      creatorShares: BigNumberish;
      daoShares: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  governor(overrides?: CallOverrides): Promise<string>;

  initialize(
    token_: string,
    timelock_: string,
    governor_: string,
    minter_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  minter(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setImplementations(
    token_: string,
    timelock_: string,
    governor_: string,
    minter_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  timelock(overrides?: CallOverrides): Promise<string>;

  token(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    clone(
      creatorAddress: string,
      tokenParams: { name: string; symbol: string; baseURI: string },
      governorParams: {
        name: string;
        proposalThreshold: BigNumberish;
        votingDelay: BigNumberish;
        votingPeriod: BigNumberish;
        quorumNumerator: BigNumberish;
        timelockDelay: BigNumberish;
      },
      minterParams: {
        maxTokens: BigNumberish;
        tokenPrice: BigNumberish;
        maxMintsPerTx: BigNumberish;
        startingBlock: BigNumberish;
        creatorShares: BigNumberish;
        daoShares: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    governor(overrides?: CallOverrides): Promise<string>;

    initialize(
      token_: string,
      timelock_: string,
      governor_: string,
      minter_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    minter(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setImplementations(
      token_: string,
      timelock_: string,
      governor_: string,
      minter_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    timelock(overrides?: CallOverrides): Promise<string>;

    token(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    ImplementationsSet(
      token?: null,
      timelock?: null,
      governor?: null,
      minter?: null
    ): TypedEventFilter<
      [string, string, string, string],
      { token: string; timelock: string; governor: string; minter: string }
    >;

    NewClone(
      token?: null,
      timelock?: null,
      governor?: null,
      minter?: null
    ): TypedEventFilter<
      [string, string, string, string],
      { token: string; timelock: string; governor: string; minter: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    clone(
      creatorAddress: string,
      tokenParams: { name: string; symbol: string; baseURI: string },
      governorParams: {
        name: string;
        proposalThreshold: BigNumberish;
        votingDelay: BigNumberish;
        votingPeriod: BigNumberish;
        quorumNumerator: BigNumberish;
        timelockDelay: BigNumberish;
      },
      minterParams: {
        maxTokens: BigNumberish;
        tokenPrice: BigNumberish;
        maxMintsPerTx: BigNumberish;
        startingBlock: BigNumberish;
        creatorShares: BigNumberish;
        daoShares: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      token_: string,
      timelock_: string,
      governor_: string,
      minter_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    minter(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setImplementations(
      token_: string,
      timelock_: string,
      governor_: string,
      minter_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    timelock(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    clone(
      creatorAddress: string,
      tokenParams: { name: string; symbol: string; baseURI: string },
      governorParams: {
        name: string;
        proposalThreshold: BigNumberish;
        votingDelay: BigNumberish;
        votingPeriod: BigNumberish;
        quorumNumerator: BigNumberish;
        timelockDelay: BigNumberish;
      },
      minterParams: {
        maxTokens: BigNumberish;
        tokenPrice: BigNumberish;
        maxMintsPerTx: BigNumberish;
        startingBlock: BigNumberish;
        creatorShares: BigNumberish;
        daoShares: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    governor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      token_: string,
      timelock_: string,
      governor_: string,
      minter_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    minter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setImplementations(
      token_: string,
      timelock_: string,
      governor_: string,
      minter_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    timelock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
